// Generated by CoffeeScript 1.7.1
(function() {
  var App, TodoListApplication, init,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  TodoListApplication = (function(_super) {
    __extends(TodoListApplication, _super);

    function TodoListApplication() {
      return TodoListApplication.__super__.constructor.apply(this, arguments);
    }

    return TodoListApplication;

  })(Marionette.Application);

  App = new TodoListApplication();

  App.addRegions({
    mainRegion: 'body'
  });

  if (window.Behaviors == null) {
    window.Behaviors = {};
  }

  Marionette.Behaviors.behaviorsLookup = function() {
    return window.Behaviors;
  };

  moment.lang('de');

  init = function() {
    return App.start();
  };

  $(init);

  App.module('GeneralBehavior', function(GeneralBehavior, App, Backbone, Marionette, $, _) {

    /*
    			The following ui elements are required:
    				addItemButton : click events, should be 
    				itemName : a val() method
    		
    			The following methods/properties are required:
    				managedCollection : either a collection or a function which returns a collection
    	
    			TODO: add some smarter handling to prevent empty names
     */
    var AddSimpleItem, Tooltip;
    AddSimpleItem = (function(_super) {
      __extends(AddSimpleItem, _super);

      function AddSimpleItem() {
        return AddSimpleItem.__super__.constructor.apply(this, arguments);
      }

      AddSimpleItem.prototype.events = {
        "click @ui.addItemButton": "addItem",
        "keydown @ui.itemName": "checkButtonState"
      };

      AddSimpleItem.prototype.checkButtonState = function() {
        if (this.view.ui.itemName.val().trim().length === 0) {
          this.view.ui.addItemButton.prop('disabled', true);
        } else {
          this.view.ui.addItemButton.prop('disabled', false);
        }
        return true;
      };

      AddSimpleItem.prototype.addItem = function(e) {
        var collection, model, modelClass;
        collection = _.result(this.view, 'managedCollection');
        modelClass = _.result(this.view, 'modelClass');
        if (modelClass != null) {
          model = new modelClass({
            name: this.view.ui.itemName.val()
          });
          model.save();
          if (collection != null) {
            collection.add(model);
          }
          this.view.ui.itemName.val(null);
          this.checkButtonState();
        }
        return false;
      };

      AddSimpleItem.prototype.onRender = function() {
        return this.checkButtonState();
      };

      return AddSimpleItem;

    })(Marionette.Behavior);
    Marionette.Behaviors.behaviorsLookup().AddSimpleItem = AddSimpleItem;
    Tooltip = (function(_super) {
      __extends(Tooltip, _super);

      function Tooltip() {
        return Tooltip.__super__.constructor.apply(this, arguments);
      }

      Tooltip.prototype.onRender = function() {
        this.view.$('*[data-toggle="tooltip"]').tooltip();
        return true;
      };

      return Tooltip;

    })(Marionette.Behavior);
    return Marionette.Behaviors.behaviorsLookup().Tooltip = Tooltip;
  });

  App.module('TodoListApp', function(TodoListApp, App, Backbone, Marionette, $, _) {

    /*
    		TODO requestHandling for the classes
     */
    var TodoListAppView, doReplicationFrom, doReplicationTo, pouchDB, pouchdbRepFrom, pouchdbRepTo, timeOutRepFrom, timeOutRepTo;
    TodoListAppView = (function(_super) {
      __extends(TodoListAppView, _super);

      function TodoListAppView() {
        return TodoListAppView.__super__.constructor.apply(this, arguments);
      }

      TodoListAppView.prototype.className = "container-fluid todolistapp-container";

      TodoListAppView.prototype.template = _.template("<div class=\"row\">\n	<div id=\"topbar\"></div>\n	<div id=\"todolistapp-lists\" class=\"col-md-4\">\n		<div id=\"todolistapp-list-input\"></div>\n		<hr />\n		<div id=\"todolistapp-lists-view\"></div>\n	</div>\n	<hr class=\"hidden-md hidden-lg\" />\n	<div id=\"todolistapp-entries\" class=\"col-md-8\">\n		<div id=\"todolistapp-entry-input\"></div>\n		<hr />\n		<div id=\"todolistapp-entries-view\"></div>\n	</div>\n	<hr  class=\"hidden-md hidden-lg\" />\n	<div id=\"todolistapp-configuration\" class=\"col-md-4 hidden\"></div>\n</div>");

      TodoListAppView.prototype.regions = {
        topBar: "#topbar",
        listsArea: "#todolistapp-lists",
        listInput: "#todolistapp-list-input",
        listsView: "#todolistapp-lists-view",
        entriesArea: "#todolistapp-entries",
        entryInput: "#todolistapp-entry-input",
        entriesView: "#todolistapp-entries-view",
        configurationView: "#todolistapp-configuration"
      };

      TodoListAppView.prototype.initialize = function() {
        this.listenTo(App.vent, 'todolist:configuration:hideview', function() {
          this.$("#todolistapp-configuration").toggleClass('hidden');
          return this.$("#todolistapp-entries").toggleClass('col-md-4 col-md-8');
        });
        return this.listenTo(App.vent, 'todolist:lists:show', function() {
          return this.$("#todolistapp-lists").toggleClass('hidden');
        });
      };

      return TodoListAppView;

    })(Marionette.LayoutView);
    if (App.TodoListApp.classes == null) {
      App.TodoListApp.classes = {};
    }
    App.TodoListApp.classes.TodoListAppView;
    pouchDB = void 0;
    App.reqres.setHandler("todolistapp:PouchDB", function() {
      if (typeof pouch === "undefined" || pouch === null) {
        pouchDB = new PouchDB('svh_todo');
      }
      return pouchDB;
    });
    App.vent.on('todolist:configurationloaded', function(config) {
      var currentConfiguration;
      App.request("todolistapp:PouchDB");
      App.vent.trigger('todolistapp:firstLoad');
      App.vent.trigger('todolistapp:startReplication');
      App.vent.trigger('todolistapp:initViews');
      currentConfiguration = App.request("todolistapp:Configuration");
      currentConfiguration.on('change:continuousreplication', function() {
        return App.vent.trigger('todolistapp:startReplication');
      });
      currentConfiguration.on('change:replicateurl', function() {
        return App.vent.trigger('todolistapp:startReplication');
      });
      return currentConfiguration.on('change:replicationinterval', function() {
        return App.vent.trigger('todolistapp:startReplication');
      });
    });
    App.vent.on('todolistapp:initViews', function() {
      TodoListApp.mainView = new TodoListAppView();
      window.TodoListApp = TodoListApp;
      return App.mainRegion.show(TodoListApp.mainView);
    });
    pouchdbRepTo = void 0;
    pouchdbRepFrom = void 0;
    window.pouchdbRepTo = pouchdbRepTo;
    timeOutRepTo = void 0;
    timeOutRepFrom = void 0;
    doReplicationTo = function() {
      var currentConfiguration, currentPouchDB;
      currentPouchDB = App.request("todolistapp:PouchDB");
      currentConfiguration = App.request("todolistapp:Configuration");
      if (timeOutRepTo != null) {
        clearTimeout(timeOutRepTo);
        timeOutRepTo = void 0;
      }
      if (pouchdbRepTo != null) {
        pouchdbRepTo.cancel();
        App.vent.trigger('replication:pouchdb:to:cancel');
      }
      pouchdbRepTo = void 0;
      if ((pouchdbRepTo == null) && (currentConfiguration.get('replicateurl') != null)) {
        pouchdbRepTo = currentPouchDB.replicate.to(currentConfiguration.get('replicateurl'), {
          live: currentConfiguration.get('continuousreplication')
        });
        window.pouchdbRepTo = pouchdbRepTo;
        pouchdbRepTo.on('uptodate', function() {
          return App.vent.trigger('replication:pouchdb:to:uptodate');
        });
        pouchdbRepTo.on('error', function() {
          pouchdbRepTo.cancel();
          pouchdbRepTo = void 0;
          App.vent.trigger('replication:pouchdb:to:error');
          if ((currentConfiguration.get('replicationinterval') != null) && currentConfiguration.get('replicationinterval') > 0) {
            return timeOutRepTo = setTimeout(doReplicationTo, currentConfiguration.get('replicationinterval') * 1000);
          }
        });
        pouchdbRepTo.on('change', function() {
          return App.vent.trigger('replication:pouchdb:to:change');
        });
        return pouchdbRepTo.on('complete', function() {
          App.vent.trigger('replication:pouchdb:to:complete');
          if (!currentConfiguration.get('continuousreplication') && (currentConfiguration.get('replicationinterval') != null) && currentConfiguration.get('replicationinterval') > 0) {
            return timeOutRepTo = setTimeout(doReplicationTo, currentConfiguration.get('replicationinterval') * 1000);
          }
        });
      }
    };
    doReplicationFrom = function() {
      var currentConfiguration, currentPouchDB;
      currentPouchDB = App.request("todolistapp:PouchDB");
      currentConfiguration = App.request("todolistapp:Configuration");
      if (timeOutRepFrom != null) {
        clearTimeout(timeOutRepFrom);
        timeOutRepFrom = void 0;
      }
      if (pouchdbRepFrom != null) {
        pouchdbRepFrom.cancel();
        App.vent.trigger('replication:pouchdb:from:cancel');
      }
      pouchdbRepFrom = void 0;
      if ((pouchdbRepFrom == null) && (currentConfiguration.get('replicateurl') != null)) {
        pouchdbRepFrom = currentPouchDB.replicate.from(currentConfiguration.get('replicateurl'), {
          live: currentConfiguration.get('continuousreplication')
        });
        pouchdbRepFrom.on('uptodate', function() {
          return App.vent.trigger('replication:pouchdb:from:uptodate');
        });
        pouchdbRepFrom.on('error', function() {
          pouchdbRepFrom.cancel();
          pouchdbRepFrom = void 0;
          App.vent.trigger('replication:pouchdb:from:error');
          if ((currentConfiguration.get('replicationinterval') != null) && currentConfiguration.get('replicationinterval') > 0) {
            return timeOutRepFrom = setTimeout(doReplicationFrom, currentConfiguration.get('replicationinterval') * 1000);
          }
        });
        pouchdbRepFrom.on('change', function() {
          return App.vent.trigger('replication:pouchdb:from:change');
        });
        return pouchdbRepFrom.on('complete', function() {
          App.vent.trigger('replication:pouchdb:from:complete');
          if (!currentConfiguration.get('continuousreplication') && (currentConfiguration.get('replicationinterval') != null) && currentConfiguration.get('replicationinterval') > 0) {
            return timeOutRepFrom = setTimeout(doReplicationFrom, currentConfiguration.get('replicationinterval') * 1000);
          }
        });
      }
    };
    App.vent.on('todolistapp:startReplication', function() {
      doReplicationTo();
      return doReplicationFrom();
    });
    App.vent.on('todolistapp:replicateToOnSave', function() {
      var currentConfiguration;
      currentConfiguration = App.request("todolistapp:Configuration");
      if (!currentConfiguration.get('continuousreplication')) {
        return doReplicationTo();
      }
    });
    TodoListApp.run = function() {
      window.TodoListApp;
      return App.vent.trigger('app:initialized', App);
    };
    return App.addInitializer(function() {
      return TodoListApp.run();
    });
  });

  App.module('TodoListApp.EntryInput', function(EntryInput, App, Backbone, Marionette, $, _) {
    var EntryInputView;
    EntryInputView = (function(_super) {
      __extends(EntryInputView, _super);

      function EntryInputView() {
        return EntryInputView.__super__.constructor.apply(this, arguments);
      }

      EntryInputView.prototype.ui = {
        "addItemButton": "button.add-item",
        "itemName": "input"
      };

      EntryInputView.prototype.behaviors = {
        AddSimpleItem: {}
      };

      EntryInputView.prototype.managedCollection = function() {
        return App.TodoListApp.entryCollection;
      };

      EntryInputView.prototype.modelClass = function() {
        return App.TodoListApp.classes.EntryModel;
      };

      EntryInputView.prototype.className = "form-group";

      EntryInputView.prototype.template = _.template("<form>\n	<label for=\"entryname\">Eintrag eintragen</label>\n	<div class=\"input-group\">\n		<span class=\"input-group-btn\">\n			<button class=\"btn btn-default toggle-entry-options\" type=\"button\"><i class=\"fa fa-tasks\"></i></button>\n		</span>\n		<input type=\"text\" class=\"form-control\" id=\"entryname\" placeholder=\"Eintrag\">\n		<span class=\"input-group-btn\">\n			<button class=\"btn btn-success add-item\" type=\"submit\"><i class=\"fa fa-plus\"></i></button>\n		</span>\n	</div>\n</form>\n<div class=\"entry-options folded\">\n	<button class=\"btn btn-default entry-sort entry-sort-name-asc active\" type=\"button\"><i class=\"fa fa-fw fa-sort-alpha-asc\"></i></button>\n	<button class=\"btn btn-default entry-sort entry-sort-name-desc\" type=\"button\"><i class=\"fa fa-fw fa-sort-alpha-desc\"></i></button>\n	<span class=\"small-space\"></span>\n	<button class=\"btn btn-default entry-sort entry-sort-date-asc\" type=\"button\"><i class=\"fa fa-fw fa-sort-numeric-asc\"></i></button>\n	<button class=\"btn btn-default entry-sort entry-sort-date-desc\" type=\"button\"><i class=\"fa fa-fw fa-sort-numeric-desc\"></i></button>\n	<span class=\"small-space\"></span>\n	<button class=\"btn btn-default toggle-show-checked\" type=\"button\"><i class=\"fa fa-fw fa-check-square-o\"></i></button>\n	<span class=\"small-space\"></span>\n	<button class=\"btn btn-default toggle-style\" type=\"button\"><i class=\"fa fa-th-list\"></i></button>\n</div>");

      EntryInputView.prototype.events = {
        'click .toggle-entry-options': function() {
          return this.$('.entry-options').toggleClass('folded');
        },
        'click .entry-sort-date-asc': function() {
          this.$('button.entry-sort').removeClass('active');
          this.$('button.entry-sort-date-asc').addClass('active');
          return App.vent.trigger('todolist:entries:sort:date:asc');
        },
        'click .entry-sort-date-desc': function() {
          this.$('button.entry-sort').removeClass('active');
          this.$('button.entry-sort-date-desc').addClass('active');
          return App.vent.trigger('todolist:entries:sort:date:desc');
        },
        'click .entry-sort-name-asc': function() {
          this.$('button.entry-sort').removeClass('active');
          this.$('button.entry-sort-name-asc').addClass('active');
          return App.vent.trigger('todolist:entries:sort:name:asc');
        },
        'click .entry-sort-name-desc': function() {
          this.$('button.entry-sort').removeClass('active');
          this.$('button.entry-sort-name-desc').addClass('active');
          return App.vent.trigger('todolist:entries:sort:name:desc');
        },
        'click .toggle-style': function() {
          var config;
          config = App.request("todolistapp:Configuration");
          if (config != null) {
            return config.toggleEntryStyle();
          }
        },
        'click .toggle-show-checked': function() {
          this.$('.toggle-show-checked').toggleClass('active');
          return App.vent.trigger('todolist:entries:toggle:show:checked');
        }
      };

      EntryInputView.prototype.changeStyle = function(model, value) {
        if ('inline' === value) {
          return this.$('.toggle-style').removeClass('active');
        } else {
          return this.$('.toggle-style').addClass('active');
        }
      };

      EntryInputView.prototype.onRender = function() {
        var config;
        config = App.request("todolistapp:Configuration");
        return this.changeStyle(config, config.get('entryStyle'));
      };

      EntryInputView.prototype.initialize = function() {
        var config;
        config = App.request("todolistapp:Configuration");
        if (config != null) {
          return this.listenTo(config, "change:entryStyle", this.changeStyle);
        }
      };

      return EntryInputView;

    })(Marionette.LayoutView);
    if (App.TodoListApp.classes == null) {
      App.TodoListApp.classes = {};
    }
    App.TodoListApp.classes.EntryInputView = EntryInputView;
    EntryInput.run = function() {
      EntryInput.mainView = new App.TodoListApp.classes.EntryInputView();
      return App.TodoListApp.mainView.entryInput.show(EntryInput.mainView);
    };
    return EntryInput.addInitializer(function() {});
  });

  App.module('TodoListApp.ListInput', function(ListInput, App, Backbone, Marionette, $, _) {
    var ListInputView;
    ListInputView = (function(_super) {
      __extends(ListInputView, _super);

      function ListInputView() {
        return ListInputView.__super__.constructor.apply(this, arguments);
      }

      ListInputView.prototype.className = "form-group";

      ListInputView.prototype.ui = {
        "addItemButton": "button.add-item",
        "itemName": "input"
      };

      ListInputView.prototype.behaviors = {
        AddSimpleItem: {}
      };

      ListInputView.prototype.managedCollection = function() {
        return App.TodoListApp.listCollection;
      };

      ListInputView.prototype.modelClass = function() {
        return App.TodoListApp.classes.ListModel;
      };

      ListInputView.prototype.template = _.template("<form>\n<label class=\"control-label\" for=\"listname\">Liste anlegen</label>\n<div class=\"input-group\">\n	<span class=\"input-group-btn\">\n		<button class=\"btn btn-default toggle-list-options\" type=\"button\"><i class=\"fa fa-tasks\"></i></button>\n	</span>\n	<input type=\"text\" class=\"form-control\" id=\"listname\" placeholder=\"Liste\">\n	<span class=\"input-group-btn\">\n		<button class=\"btn btn-success add-item\" type=\"submit\"><i class=\"fa fa-plus\"></i></button>\n	</span>\n</div>\n</form>\n<div class=\"sort-options folded\">\n	<button class=\"btn btn-default list-sort list-sort-name-asc active\" type=\"button\"><i class=\"fa fa-fw fa-sort-alpha-asc\"></i></button>\n	<button class=\"btn btn-default list-sort list-sort-name-desc\" type=\"button\"><i class=\"fa fa-fw fa-sort-alpha-desc\"></i></button>\n	<span class=\"small-space\"></span>\n	<button class=\"btn btn-default list-sort list-sort-date-asc\" type=\"button\"><i class=\"fa fa-fw fa-sort-numeric-asc\"></i></button>\n	<button class=\"btn btn-default list-sort list-sort-date-desc\" type=\"button\"><i class=\"fa fa-fw fa-sort-numeric-desc\"></i></button>\n	<span class=\"small-space hidden\"></span>\n	<button class=\"btn btn-default list-sort list-sort-amount-asc hidden\" type=\"button\"><i class=\"fa fa-fw fa-sort-amount-asc\"></i></button>\n	<button class=\"btn btn-default list-sort list-sort-amount-desc hidden\" type=\"button\"><i class=\"fa fa-fw fa-sort-amount-desc\"></i></button>\n		\n	<span class=\"small-space\"></span>\n	<button class=\"btn btn-default toggle-style\" type=\"button\"><i class=\"fa fa-th-list\"></i></button>\n	\n</div>");

      ListInputView.prototype.events = {
        'click .toggle-list-options': function() {
          return this.$('.sort-options').toggleClass('folded');
        },
        'click .toggle-style': function() {
          var config;
          config = App.request("todolistapp:Configuration");
          if (config != null) {
            return config.toggleListStyle();
          }
        },
        'click .list-sort-date-asc': function() {
          var config;
          config = App.request("todolistapp:Configuration");
          if (config != null) {
            config.set('listSort', 'dateAsc');
            return config.save();
          }
        },
        'click .list-sort-date-desc': function() {
          var config;
          config = App.request("todolistapp:Configuration");
          if (config != null) {
            config.set('listSort', 'dateDesc');
            return config.save();
          }
        },
        'click .list-sort-name-asc': function() {
          var config;
          config = App.request("todolistapp:Configuration");
          if (config != null) {
            config.set('listSort', 'nameAsc');
            return config.save();
          }
        },
        'click .list-sort-name-desc': function() {
          var config;
          config = App.request("todolistapp:Configuration");
          if (config != null) {
            config.set('listSort', 'nameDesc');
            return config.save();
          }
        },
        'click .list-sort-amount-asc': function() {
          var config;
          config = App.request("todolistapp:Configuration");
          if (config != null) {
            config.set('listSort', 'amountAsc');
            return config.save();
          }
        },
        'click .list-sort-amount-desc': function() {
          var config;
          config = App.request("todolistapp:Configuration");
          if (config != null) {
            config.set('listSort', 'amountDesc');
            return config.save();
          }
        }
      };

      ListInputView.prototype.changeStyle = function(model, value) {
        if ('inline' === value) {
          return this.$('.toggle-style').removeClass('active');
        } else {
          return this.$('.toggle-style').addClass('active');
        }
      };

      ListInputView.prototype.changeSort = function(model, sortType) {
        console.debug(sortType);
        this.$('button.list-sort').removeClass('active');
        switch (sortType) {
          case "nameAsc":
            return this.$('button.list-sort-name-asc').addClass('active');
          case "nameDesc":
            return this.$('button.list-sort-name-desc').addClass('active');
          case "dateAsc":
            return this.$('button.list-sort-date-asc').addClass('active');
          case "dateDesc":
            return this.$('button.list-sort-date-desc').addClass('active');
          case "amountAsc":
            return this.$('button.list-sort-amount-asc').addClass('active');
          case "amountDesc":
            return this.$('button.list-sort-amount-desc').addClass('active');
        }
      };

      ListInputView.prototype.onRender = function() {
        var config;
        config = App.request("todolistapp:Configuration");
        this.changeStyle(config, config.get('listStyle'));
        return this.changeSort(config, config.get('listSort'));
      };

      ListInputView.prototype.initialize = function() {
        var config;
        config = App.request("todolistapp:Configuration");
        if (config != null) {
          this.listenTo(config, "change:listStyle", this.changeStyle);
          return this.listenTo(config, "change:listSort", this.changeSort);
        }
      };

      return ListInputView;

    })(Marionette.LayoutView);
    if (App.TodoListApp.classes == null) {
      App.TodoListApp.classes = {};
    }
    App.TodoListApp.classes.ListInputView = ListInputView;
    ListInput.run = function() {
      this.mainView = new ListInputView();
      return App.TodoListApp.mainView.listInput.show(this.mainView);
    };
    App.mainRegion.on('before:show', function(view) {

      /*
      			TODO check with instanceof
       */
      ListInput.mainView = new ListInputView();
      return view.listInput.show(ListInput.mainView);
    });
    return ListInput.addInitializer(function() {});
  });

  App.module('TodoListApp.ListsView', function(ListsView, App, Backbone, Marionette, $, _) {
    var DescSort, ListCollection, ListCollectionView, ListItemView, ListModel, NoEntrieView, listCollection, pouchdb, pouchdbOptions, refetchData;
    DescSort = function(attribute) {
      return function(a, b) {
        var aDate, bDate;
        aDate = a.get(attribute);
        bDate = b.get(attribute);
        if (aDate === bDate) {
          return 0;
        } else {
          if (aDate > bDate) {
            return -1;
          } else {
            return 1;
          }
        }
      };
    };
    NoEntrieView = (function(_super) {
      __extends(NoEntrieView, _super);

      function NoEntrieView() {
        return NoEntrieView.__super__.constructor.apply(this, arguments);
      }

      NoEntrieView.prototype.tagName = "li";

      NoEntrieView.prototype.className = "list-group-item list-group-item-warning no-entry-view";

      NoEntrieView.prototype.getTemplate = function() {
        if (!!this.model.get('fetchingListData')) {
          return _.template("<i class=\"fa fa-circle-o-notch fa-spin\"></i> Es werden gerade Daten geladen!");
        } else {
          return _.template("Es gibt keine Einträge!");
        }
      };

      NoEntrieView.prototype.modelEvents = {
        'change:fetchingListData': 'listFetchStatusChanged'
      };


      /*
      			TODO watch out for the collection loads data
       */

      NoEntrieView.prototype.listFetchStatusChanged = function() {
        return this.render();
      };

      return NoEntrieView;

    })(Marionette.ItemView);
    ListItemView = (function(_super) {
      __extends(ListItemView, _super);

      function ListItemView() {
        return ListItemView.__super__.constructor.apply(this, arguments);
      }

      ListItemView.prototype.tagName = "li";

      ListItemView.prototype.className = "list-group-item";

      ListItemView.prototype.cid = 'ListItemView';

      ListItemView.prototype.template = _.template("<span class=\"content\"><%= name %></span>\n<div class=\"delete\"><div class=\"center\">\n		<i class=\"fa fa-fw fa-trash-o\"></i>\n</div></div>\n<div class=\"no\"><div class=\"center\">\n		<i class=\"fa fa-fw fa-ban\"></i>\n</div></div>");

      ListItemView.prototype.behaviors = {
        Tooltip: {}
      };

      ListItemView.prototype.initialize = function() {
        return this.model.correspondingView = this;
      };

      ListItemView.prototype.events = {
        'click .delete': function() {
          if (this.$el.hasClass('delete-mode')) {
            this.model.destroy();
          } else {
            this.$el.addClass('delete-mode');
          }
          return false;
        },
        'click .no': function() {
          this.$el.removeClass('delete-mode');
          return false;
        },
        'click': function() {
          if (!this.$el.hasClass('list-group-item-info')) {
            this.$el.siblings().removeClass('list-group-item-info');
            this.$el.siblings().find('.editable').editable('destroy');
            this.$(".content").editable({
              type: 'text',
              name: 'Name eingeben',
              value: this.model.get('name'),
              pk: this.model.get('id'),
              url: '',
              mode: 'inline',
              success: function(response, newValue) {
                thisModel.set('name', newValue);
                return thisModel.save();
              }
            });
            return App.vent.trigger('todolist:changelist', this.model);
          }
        }
      };

      ListItemView.prototype.modelEvents = {
        'destroy': function(a) {
          if ((a != null) && (a.id != null)) {
            return App.vent.trigger('todolist:deleted-list', a.id);
          }
        }
      };

      ListItemView.prototype.clicked = function() {
        return this.$el.addClass('list-group-item-info');
      };

      ListItemView.prototype.onRender = function() {
        var thisModel;
        thisModel = this.model;
        return true;
      };

      ListItemView.prototype.onDestroy = function() {
        return this.model.correspondingView = null;
      };

      return ListItemView;

    })(Marionette.ItemView);
    ListCollectionView = (function(_super) {
      __extends(ListCollectionView, _super);

      function ListCollectionView() {
        return ListCollectionView.__super__.constructor.apply(this, arguments);
      }

      ListCollectionView.prototype.tagName = "ul";

      ListCollectionView.prototype.className = "list-group";

      ListCollectionView.prototype.childView = ListItemView;

      ListCollectionView.prototype.emptyView = NoEntrieView;

      ListCollectionView.prototype.collectionEvents = {
        'remove': function(a) {
          if ((a != null) && (a.id != null)) {
            return App.vent.trigger('todolist:deleted-list', a.id);
          }
        },
        'request': function() {
          return App.request("todolistapp:Configuration").set('fetchingListData', true);
        },
        'sync': function() {
          return App.request("todolistapp:Configuration").set('fetchingListData', false);
        }
      };

      ListCollectionView.prototype.resortView = function() {
        var elem, oneModel, _i, _len, _ref, _results;
        elem = this.$el;
        if (0 < this.collection.length) {
          _ref = this.collection.models;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            oneModel = _ref[_i];
            _results.push((function(oneModel) {
              return elem.append(oneModel.correspondingView.$el);
            })(oneModel));
          }
          return _results;
        }
      };

      ListCollectionView.prototype.sortCollectionDateAsc = function() {
        this.collection.comparator = "created";
        return this.collection.sort();
      };

      ListCollectionView.prototype.sortCollectionDateDesc = function() {
        this.collection.comparator = DescSort('created');
        return this.collection.sort();
      };

      ListCollectionView.prototype.sortCollectionNameAsc = function() {
        this.collection.comparator = "name";
        return this.collection.sort();
      };

      ListCollectionView.prototype.sortCollectionNameDesc = function() {
        this.collection.comparator = DescSort('name');
        return this.collection.sort();
      };

      ListCollectionView.prototype.sortCollectionAmountAsc = function() {
        this.collection.comparator = "_id";
        return this.collection.sort();
      };

      ListCollectionView.prototype.sortCollectionAmountDesc = function() {
        return this.collection.comparator = DescSort('_id');
      };

      ListCollectionView.prototype.changeStyle = function(model, value) {
        if ('inline' === value) {
          return this.$el.addClass('list-inline');
        } else {
          return this.$el.removeClass('list-inline');
        }
      };

      ListCollectionView.prototype.changeSort = function(model, sortType) {
        switch (sortType) {
          case "nameAsc":
            return this.sortCollectionNameAsc();
          case "nameDesc":
            return this.sortCollectionNameDesc();
          case "dateAsc":
            return this.sortCollectionDateAsc();
          case "dateDesc":
            return this.sortCollectionDateDesc();
          case "amountAsc":
            return this.sortCollectionAmountAsc();
          case "amountDesc":
            return this.sortCollectionAmountDesc();
        }
      };

      ListCollectionView.prototype.onRender = function() {
        var config;
        config = App.request("todolistapp:Configuration");
        this.changeStyle(config, config.get('listStyle'));
        return this.changeSort(config, config.get('listSort'));
      };

      ListCollectionView.prototype.initialize = function() {
        var config;
        config = App.request("todolistapp:Configuration");
        if (config != null) {
          this.listenTo(config, "change:listSort", this.changeSort);
          return this.listenTo(config, "change:listStyle", this.changeStyle);
        }
      };

      return ListCollectionView;

    })(Marionette.CollectionView);
    pouchdb = App.request("todolistapp:PouchDB");
    ListModel = (function(_super) {
      __extends(ListModel, _super);

      function ListModel() {
        return ListModel.__super__.constructor.apply(this, arguments);
      }

      ListModel.prototype.idAttribute = '_id';

      ListModel.prototype.defaults = function() {
        return {
          "app-name": 'de.sh-dev.couchtodolist',
          username: App.request("todolistapp:Configuration").get('username'),
          type: 'todolist',
          created: JSON.parse(JSON.stringify(new Date()))
        };
      };

      ListModel.prototype.sync = BackbonePouch.sync({
        db: pouchdb
      });

      ListModel.prototype.initialize = function() {};

      return ListModel;

    })(Backbone.Model);
    pouchdbOptions = {
      db: pouchdb,
      fetch: 'query',
      options: {
        query: {
          include_docs: true,
          fun: {
            map: function(doc) {
              if (doc.type === 'todolist') {
                return emit(doc.position, null);
              }
            }
          }
        }
      }
    };
    ListCollection = (function(_super) {
      __extends(ListCollection, _super);

      function ListCollection() {
        return ListCollection.__super__.constructor.apply(this, arguments);
      }

      ListCollection.prototype.model = ListModel;

      ListCollection.prototype.sync = BackbonePouch.sync(pouchdbOptions);

      ListCollection.prototype.comparator = 'name';

      ListCollection.prototype.parse = function(result) {
        return _.pluck(result.rows, 'doc');
      };

      return ListCollection;

    })(Backbone.Collection);
    if (App.TodoListApp.classes == null) {
      App.TodoListApp.classes = {};
    }
    App.TodoListApp.classes.ListItemView = ListItemView;
    App.TodoListApp.classes.ListCollectionView = ListCollectionView;
    App.TodoListApp.classes.ListCollection = ListCollection;
    App.TodoListApp.classes.ListModel = ListModel;
    App.vent.on('todolist:changelist', function(todolistmodel) {
      return todolistmodel.correspondingView.clicked();
    });
    listCollection = void 0;
    refetchData = function() {
      if ((!App.request("todolistapp:Configuration").get('fetchingListData')) && (App.TodoListApp.listCollection != null)) {
        return App.TodoListApp.listCollection.fetch();
      }
    };
    App.vent.on('replication:pouchdb:to:complete', refetchData);
    App.vent.on('replication:pouchdb:to:uptodate', refetchData);
    App.vent.on('replication:pouchdb:from:uptodate', refetchData);
    App.vent.on('replication:pouchdb:from:complete', refetchData);
    App.vent.on('todolistapp:startReplication', refetchData);
    App.vent.on('todolistapp:pouchdb:destroyed', refetchData);
    App.vent.on('todolistapp:firstLoad', refetchData);
    return App.mainRegion.on('before:show', function(view) {
      var listCollectionViewOptions;
      listCollectionViewOptions = {
        collection: new ListCollection(),
        emptyViewOptions: {
          model: App.request("todolistapp:Configuration")
        }
      };
      ListsView.mainView = new ListCollectionView(listCollectionViewOptions);
      view.listsView.show(ListsView.mainView);
      App.TodoListApp.listCollection = ListsView.mainView.collection;
      return ListsView.mainView.collection.fetch();
    });
  });

  App.module('TodoListApp.EntriesView', function(EntriesView, App, Backbone, Marionette, $, _) {
    var EntryCollectionFactory, EntryCollectionView, EntryItemView, EntryModelFactory, NoEntryView, refetchData;
    NoEntryView = (function(_super) {
      __extends(NoEntryView, _super);

      function NoEntryView() {
        return NoEntryView.__super__.constructor.apply(this, arguments);
      }

      NoEntryView.prototype.tagName = "li";

      NoEntryView.prototype.className = "list-group-item list-group-item-warning no-entry-view";

      NoEntryView.prototype.getTemplate = function() {
        if (!!this.model.get('fetchingEntryData')) {
          return _.template("<i class=\"fa fa-circle-o-notch fa-spin\"></i> Es werden gerade Daten geladen!");
        } else {
          return _.template("Es gibt keine Einträge!");
        }
      };

      NoEntryView.prototype.modelEvents = {
        'change:fetchingEntryData': 'entryFetchStatusChanged'
      };


      /*
      			TODO watch out for the collection loads data
       */

      NoEntryView.prototype.entryFetchStatusChanged = function() {
        return this.render();
      };

      return NoEntryView;

    })(Marionette.ItemView);
    EntryItemView = (function(_super) {
      __extends(EntryItemView, _super);

      function EntryItemView() {
        return EntryItemView.__super__.constructor.apply(this, arguments);
      }

      EntryItemView.prototype.tagName = "li";

      EntryItemView.prototype.className = "list-group-item todolist-entry";

      EntryItemView.prototype.template = _.template("<div class=\"checkbox\">\n	<div class=\"center\">\n		<i class=\"fa fa-fw fa-check\"></i>\n	</div>\n</div>\n<span class=\"content\"><%= name %></span>\n<div class=\"delete\"><div class=\"center\">\n		<i class=\"fa fa-fw fa-trash-o\"></i>\n</div></div>\n<div class=\"no\"><div class=\"center\">\n		<i class=\"fa fa-fw fa-ban\"></i>\n</div></div>");

      EntryItemView.prototype.behaviors = {
        Tooltip: {}
      };

      EntryItemView.prototype.initialize = function() {
        return this.model.correspondingView = this;
      };

      EntryItemView.prototype.modelEvents = {
        "change:checked": 'renderCheckStatus',
        "change:name": 'reRenderName'
      };

      EntryItemView.prototype.events = {
        'click .delete': function() {
          if (this.$el.hasClass('delete-mode')) {
            this.model.destroy();
          } else {
            this.$el.addClass('delete-mode');
          }
          return false;
        },
        'click .no': function() {
          this.$el.removeClass('delete-mode');
          return false;
        },
        'click .checkbox': function() {
          this.model.toggleCheck();
          this.model.save();
          return false;
        },
        'click': function() {
          if (!this.$el.hasClass('list-group-item-info')) {
            this.$el.siblings().removeClass('list-group-item-info');
            this.$el.siblings().find('.editable').editable('destroy');
            this.$el.addClass('list-group-item-info');
            return this.$(".content").editable({
              type: 'text',
              name: 'Name eingeben',
              value: this.model.get('name'),
              pk: this.model.get('id'),
              url: '',
              mode: 'inline',
              success: function(response, newValue) {
                thisModel.set('name', newValue);
                return thisModel.save();
              }
            }, this.renderCheckStatus());
          }
        }
      };

      EntryItemView.prototype.reRenderName = function() {
        return this.$('.content').text(this.model.get('name'));
      };

      EntryItemView.prototype.renderCheckStatus = function() {
        if (this.model.get('checked') != null) {
          return this.$el.addClass('ischecked');
        } else {
          return this.$el.removeClass('ischecked');
        }
      };

      EntryItemView.prototype.onRender = function() {
        var thisModel;
        thisModel = this.model;
        this.renderCheckStatus();
        return true;
      };

      EntryItemView.prototype.onDestroy = function() {
        return this.model.correspondingView = null;
      };

      return EntryItemView;

    })(Marionette.ItemView);
    EntryCollectionView = (function(_super) {
      __extends(EntryCollectionView, _super);

      function EntryCollectionView() {
        return EntryCollectionView.__super__.constructor.apply(this, arguments);
      }

      EntryCollectionView.prototype.tagName = "ul";

      EntryCollectionView.prototype.className = "list-group todolist-entries-list";

      EntryCollectionView.prototype.childView = EntryItemView;

      EntryCollectionView.prototype.emptyView = NoEntryView;

      EntryCollectionView.prototype.collectionEvents = {
        'request': function() {
          return App.request("todolistapp:Configuration").set('fetchingEntryData', true);
        },
        'sync': function() {
          return App.request("todolistapp:Configuration").set('fetchingEntryData', false);
        }
      };

      EntryCollectionView.prototype.changeStyle = function(model, value) {
        if ('inline' === value) {
          return this.$el.addClass('list-inline');
        } else {
          return this.$el.removeClass('list-inline');
        }
      };

      EntryCollectionView.prototype.onRender = function() {
        var config;
        config = App.request("todolistapp:Configuration");
        return this.changeStyle(config, config.get('entryStyle'));
      };

      EntryCollectionView.prototype.initialize = function() {
        var config;
        config = App.request("todolistapp:Configuration");
        if (config != null) {
          this.listenTo(config, "todolist:lists:sort:date:asc", this.sortCollectionDateAsc);
          this.listenTo(config, "todolist:lists:sort:date:desc", this.sortCollectionDateDesc);
          this.listenTo(config, "todolist:lists:sort:name:asc", this.sortCollectionNameAsc);
          this.listenTo(config, "todolist:lists:sort:name:desc", this.sortCollectionNameDesc);
          this.listenTo(config, "todolist:lists:sort:amount:asc", this.sortCollectionAmountAsc);
          this.listenTo(config, "todolist:lists:sort:amount:desc", this.sortCollectionAmountDesc);
          return this.listenTo(config, "change:entryStyle", this.changeStyle);
        }
      };

      return EntryCollectionView;

    })(Marionette.CollectionView);
    EntryModelFactory = function(todolistid) {
      var EntryModel, pouchdb;
      pouchdb = App.request("todolistapp:PouchDB");
      EntryModel = (function(_super) {
        __extends(EntryModel, _super);

        function EntryModel() {
          return EntryModel.__super__.constructor.apply(this, arguments);
        }

        EntryModel.prototype.idAttribute = '_id';

        EntryModel.prototype.defaults = function() {
          return {
            "app-name": 'de.sh-dev.couchtodolist',
            username: App.request("todolistapp:Configuration").get('username'),
            type: 'todoentry',
            created: JSON.parse(JSON.stringify(new Date())),
            "todolist-id": todolistid,
            checked: null
          };
        };

        EntryModel.prototype.sync = BackbonePouch.sync({
          db: pouchdb
        });

        EntryModel.prototype.check = function() {
          if (this.get('checked') == null) {
            return this.set('checked', JSON.parse(JSON.stringify(new Date())));
          }
        };

        EntryModel.prototype.unCheck = function() {
          if (this.get('checked') != null) {
            return this.set('checked', null);
          }
        };

        EntryModel.prototype.toggleCheck = function() {
          if (this.get('checked') != null) {
            return this.unCheck();
          } else {
            return this.check();
          }
        };

        return EntryModel;

      })(Backbone.Model);
      return EntryModel;
    };
    EntryCollectionFactory = function(todolistid) {
      var EntryCollection, mapfunc, pouchdb, pouchdbOptions;
      pouchdb = App.request("todolistapp:PouchDB");
      mapfunc = function(doc) {
        if ((doc.type != null) && (doc["todolist-id"] != null)) {
          if (doc.type === 'todoentry') {
            return emit(doc["todolist-id"], doc.pos);
          }
        }
      };
      pouchdbOptions = {
        db: pouchdb,
        fetch: 'query',
        options: {
          query: {
            include_docs: true,
            fun: {
              map: mapfunc
            },
            key: todolistid
          }
        }
      };
      EntryCollection = (function(_super) {
        __extends(EntryCollection, _super);

        function EntryCollection() {
          return EntryCollection.__super__.constructor.apply(this, arguments);
        }

        EntryCollection.prototype.model = EntryModelFactory(todolistid);

        EntryCollection.prototype.sync = BackbonePouch.sync(pouchdbOptions);

        EntryCollection.prototype["todolist-id"] = todolistid;

        EntryCollection.prototype.comparator = 'created';

        EntryCollection.prototype.parse = function(result) {
          return _.pluck(result.rows, 'doc');
        };

        return EntryCollection;

      })(Backbone.Collection);
      return EntryCollection;
    };
    if (App.TodoListApp.classes == null) {
      App.TodoListApp.classes = {};
    }
    App.TodoListApp.classes.EntryItemView = EntryItemView;
    App.TodoListApp.classes.EntryCollectionView = EntryCollectionView;
    App.TodoListApp.classes.EntryCollectionFactory = EntryCollectionFactory;
    App.TodoListApp.classes.EntryModelFactory = EntryModelFactory;
    App.TodoListApp.classes.EntryModel = void 0;
    App.TodoListApp.classes.EntryCollection = void 0;
    EntriesView.run = function() {
      return App.TodoListApp.entryCollection = void 0;
    };
    EntriesView.addInitializer(function() {
      return EntriesView.run();
    });
    refetchData = function() {
      if ((!App.request("todolistapp:Configuration").get('fetchingEntryData')) && (App.TodoListApp.entryCollection != null)) {
        return App.TodoListApp.entryCollection.fetch();
      }
    };
    App.vent.on('replication:pouchdb:to:complete', refetchData);
    App.vent.on('replication:pouchdb:to:uptodate', refetchData);
    App.vent.on('replication:pouchdb:from:uptodate', refetchData);
    App.vent.on('replication:pouchdb:from:complete', refetchData);
    App.vent.on('todolistapp:startReplication', refetchData);
    App.vent.on('todolist:deleted-list', function(a) {
      if (App.TodoListApp.entryCollection != null) {
        if (a === App.TodoListApp.entryCollection["todolist-id"]) {
          App.TodoListApp.mainView.entriesView.reset();
          App.TodoListApp.mainView.entryInput.reset();
          return App.TodoListApp.entryCollection = null;
        }
      }
    });
    return App.vent.on('todolist:changelist', function(todolistmodel) {
      var entryCollectionViewOptions, todolistid;
      todolistid = todolistmodel.id;
      if (!App.TodoListApp.mainView.entryInput.hasView()) {
        App.TodoListApp.EntryInput.run();
      }
      App.TodoListApp.classes.EntryModel = App.TodoListApp.classes.EntryModelFactory(todolistid);
      App.TodoListApp.classes.EntryCollection = App.TodoListApp.classes.EntryCollectionFactory(todolistid);
      entryCollectionViewOptions = {
        collection: new App.TodoListApp.classes.EntryCollection(todolistid),
        emptyViewOptions: {
          model: App.request("todolistapp:Configuration")
        }
      };
      EntriesView.mainView = new EntryCollectionView(entryCollectionViewOptions);
      EntriesView.mainView.collection.reset();
      App.TodoListApp.mainView.entriesView.show(EntriesView.mainView);
      App.TodoListApp.entryCollection = EntriesView.mainView.collection;
      EntriesView.mainView.collection.fetch();
      return void 0;
    });
  });

  App.module('TodoListApp.Configuration', function(Configuration, App, Backbone, Marionette, $, _) {
    var ConfigurationView, TodoConfigurationCollection, TodoConfigurationModel, configurationErrorOnLoad, configurationLoaded;
    TodoConfigurationModel = (function(_super) {
      __extends(TodoConfigurationModel, _super);

      function TodoConfigurationModel() {
        return TodoConfigurationModel.__super__.constructor.apply(this, arguments);
      }

      TodoConfigurationModel.prototype.defaults = {
        continuousreplication: false,
        username: "Brandt",
        replicateurl: null,
        replicationinterval: 5 * 60,
        deleteCheckedEntries: 5 * 24 * 60 * 60,
        deleteUnusedEntries: 24 * 60 * 60,
        fetchingListData: false,
        fetchingEntryData: false,
        listStyle: "list",
        listSort: "nameAsc",
        entryStyle: "list",
        entrySort: "nameAsc",
        entryShowChecked: true
      };

      TodoConfigurationModel.prototype.blacklistAtrributes = [];

      TodoConfigurationModel.prototype.toJSON = function(options) {
        return _.omit(this.attributes, this.blacklist);
      };

      TodoConfigurationModel.prototype.toggleEntryStyle = function() {
        if ('list' === this.get('entryStyle')) {
          this.set('entryStyle', 'inline');
        } else {
          this.set('entryStyle', 'list');
        }
        return this.save();
      };

      TodoConfigurationModel.prototype.toggleListStyle = function() {
        if ('list' === this.get('listStyle')) {
          this.set('listStyle', 'inline');
        } else {
          this.set('listStyle', 'list');
        }
        return this.save();
      };

      TodoConfigurationModel.prototype.validate = function(attributes, options) {
        var returnValue, urlRegEx;
        returnValue = [];
        if ((attributes.username == null) || !_.isString(attributes.username) || attributes.username.trim().length === 0) {
          returnValue.push('username');
        }
        urlRegEx = /^(https?:\/\/)(?:\S+(?::\S*)?@)?((([a-z\d]([a-z\d-]*[a-z\d])*)\.)+[a-z]{2,}|((\d{1,3}\.){3}\d{1,3}))(\:\d+)?(\/[-a-z\d%_.~+]*)*(\?[;&a-z\d%_.~+=-]*)?(\#[-a-z\d_]*)?$/i;
        if ((attributes.replicateurl == null) || !_.isString(attributes.replicateurl) || (attributes.replicateurl.trim().length = 0)) {

        } else {
          if (!urlRegEx.test(attributes.replicateurl)) {
            returnValue.push('replicateurl');
          }
        }
        if (returnValue.length === 0) {
          return void 0;
        } else {
          return returnValue;
        }
      };

      return TodoConfigurationModel;

    })(Backbone.Model);
    TodoConfigurationCollection = (function(_super) {
      __extends(TodoConfigurationCollection, _super);

      function TodoConfigurationCollection() {
        return TodoConfigurationCollection.__super__.constructor.apply(this, arguments);
      }

      TodoConfigurationCollection.prototype.localStorage = new Backbone.LocalStorage("TodoListApp");

      TodoConfigurationCollection.prototype.model = TodoConfigurationModel;

      return TodoConfigurationCollection;

    })(Backbone.Collection);
    Configuration.todoConfiguration = {};
    if (App.TodoListApp.classes == null) {
      App.TodoListApp.classes = {};
    }
    App.TodoListApp.classes.TodoConfigurationCollection = TodoConfigurationCollection;
    App.TodoListApp.classes.TodoConfigurationModel = TodoConfigurationModel;
    ConfigurationView = (function(_super) {
      __extends(ConfigurationView, _super);

      function ConfigurationView() {
        return ConfigurationView.__super__.constructor.apply(this, arguments);
      }

      ConfigurationView.prototype.tagName = "form";

      ConfigurationView.prototype.setValues = function() {
        this.$('input.username').val(this.model.get('username'));
        this.$('input.replicateurl').val(this.model.get('replicateurl'));
        this.$('input.continuousreplication').prop('checked', this.model.get('continuousreplication'));
        this.$('input.replicationinterval').val(this.model.get('replicationinterval'));
        this.$('input.delete-checked-entries').val(this.model.get('deleteCheckedEntries'));
        this.$('input.delete-unused-entries').val(this.model.get('deleteUnusedEntries'));
        if (this.model.isValid()) {
          return this.$('.form-group').removeClass('has-error');
        }
      };

      ConfigurationView.prototype.saveEntries = function() {
        this.model.save({
          username: this.$('input.username').val().trim()
        });
        this.model.save({
          replicateurl: this.$('input.replicateurl').val().trim()
        });
        this.model.save({
          replicationinterval: parseInt(this.$('input.replicationinterval').val().trim())
        });
        this.model.save({
          continuousreplication: this.$('input.continuousreplication').prop('checked')
        });
        this.model.save({
          deleteCheckedEntries: parseInt(this.$('input.delete-checked-entries').val().trim())
        });
        return this.model.save({
          deleteUnusedEntries: parseInt(this.$('input.delete-unused-entries').val().trim())
        });
      };

      ConfigurationView.prototype.events = {
        'submit': function() {
          this.saveEntries();
          return false;
        },
        'reset': function() {
          this.setValues();
          return false;
        },
        'click .destroy-db': function() {
          App.request("todolistapp:PouchDB").destroy();
          return App.vent.trigger('todolistapp:pouchdb:destroyed');
        },
        'click .cleanup-db': function() {
          return App.request("todolistapp:PouchDB").compact();
        }
      };

      ConfigurationView.prototype.modelEvents = {
        'change': function() {
          return this.setValues();
        },
        'invalid': function() {
          var field, _i, _len, _ref, _results;
          _ref = this.model.validationError;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            field = _ref[_i];
            _results.push(this.$('.form-group.' + field).addClass('has-error'));
          }
          return _results;
        }
      };

      ConfigurationView.prototype.template = _.template("	<div class=\"username form-group has-error\">\n		<label class=\"control-label\" for=\"username\">Benutzername</label>\n		<input type=\"text\" class=\"form-control username\" placeholder=\"Mein Name ist??\" required />\n	</div>\n	<hr />\n	<div class=\"replicateurl form-group has-error\">\n		<label class=\"control-label\" for=\"replicateurl\">Adresse zum Replizieren</label>\n		<input type=\"url\" class=\"form-control replicateurl\" placeholder=\"http://\" required />\n	</div>\n	<div class=\"continuousreplication form-group has-error\">\n		<div class=\"checkbox\">\n			<label>\n				<input type=\"checkbox\" class=\"continuousreplication\"><strong>Durchgängige Replikation</strong>\n			</label>\n		</div>\n	</div>\n	<div class=\"form-group replicationinterval has-error\">\n		<label class=\"control-label\" for=\"replicationinterval\">Replikations- / Wiederversuchsinterval</label>\n		<div class=\"input-group\">\n			<input class=\"form-control replicationinterval\" required type=\"number\" min=\"0\" step=\"3\" placeholder=\"0\" />\n			<div class=\"input-group-btn\">\n				<button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"button-caption\">sek</span> <span class=\"caret\"></span></button>\n				<ul class=\"dropdown-menu dropdown-menu-right\" role=\"menu\">\n					<li><a href=\"#\" class=\"sek\">sek</a></li>\n					<li><a href=\"#\" class=\"min\">min</a></li>\n					<li><a href=\"#\" class=\"h\">h</a></li>\n				</ul>\n			</div><!-- /btn-group -->\n		</div>\n	</div>\n	<hr class=\" hidden\" />\n	<div class=\"form-group delete-checked-entries has-error hidden\">\n		<label class=\"control-label\" for=\"delete-checked-entries\">Löschen von abgearbeiteten Einträgen nach</label>\n		<div class=\"input-group\">\n			<input type=\"number\" class=\"form-control delete-checked-entries\" min=\"0\" step=\"3\" placeholder=\"0\" />\n			<div class=\"input-group-btn\">\n				<button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"button-caption\">sek</span> <span class=\"caret\"></span></button>\n				<ul class=\"dropdown-menu dropdown-menu-right\" role=\"menu\">\n					<li><a href=\"#\" class=\"sek\">sek</a></li>\n					<li><a href=\"#\" class=\"min\">min</a></li>\n					<li><a href=\"#\" class=\"h\">h</a></li>\n				</ul>\n			</div><!-- /btn-group -->\n		</div><!-- /input-group -->\n	</div><!-- /form-group -->\n	<div class=\"form-group delete-unused-entries has-error hidden\">\n		<label class=\"control-label\" for=\"delete-unused-entries\">Löschen von ungenutzen Einträgen nach</label>\n		<div class=\"input-group\">\n			<input type=\"number\" class=\"form-control delete-unused-entries\" min=\"0\" step=\"3\" placeholder=\"0\" />\n			<div class=\"input-group-btn\">\n				<button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"button-caption\">sek</span> <span class=\"caret\"></span></button>\n				<ul class=\"dropdown-menu dropdown-menu-right\" role=\"menu\">\n					<li><a href=\"#\" class=\"sek\">sek</a></li>\n					<li><a href=\"#\" class=\"min\">min</a></li>\n					<li><a href=\"#\" class=\"h\">h</a></li>\n				</ul>\n			</div><!-- /btn-group -->\n		</div><!-- /input-group -->\n	</div><!-- /form-group -->\n\n	<hr />\n	<div class=\"row\">\n		<div class=\"col-xs-6\">\n			<button type=\"reset\" class=\"btn-block btn btn-warning \">Zurücksetzen</button>\n		</div>\n		<div class=\"col-xs-6\">\n			<button type=\"submit\" class=\"btn-block btn btn-primary \">Speichern</button>\n		</div>\n	</div>\n\n	<hr />\n	<div class=\"row\">\n		<div class=\"col-xs-6\">\n			<button class=\"btn-block btn btn-danger destroy-db\">Datenbank löschen</button>\n		</div>\n		<div class=\"col-xs-6\">\n			<button class=\"btn-block btn btn-primary cleanup-db\">Aufräumen</button>\n		</div>\n	</div>\n");

      ConfigurationView.prototype.onRender = function() {
        return this.setValues();
      };

      return ConfigurationView;

    })(Marionette.LayoutView);
    configurationLoaded = function() {
      return App.vent.trigger('todolist:configurationloaded', Configuration.todoConfiguration);
    };
    configurationErrorOnLoad = function() {
      return App.vent.trigger('todolist:configurationerroronload');
    };
    Configuration.run = function() {
      Configuration.todoConfiguration = new TodoConfigurationCollection();
      App.reqres.setHandler("todolistapp:Configuration", function() {
        if (Configuration.todoConfiguration.length === 0) {
          Configuration.todoConfiguration.add(new TodoConfigurationModel());
          Configuration.todoConfiguration.at(0).save(null, {
            wait: true
          });
          Configuration.todoConfiguration.at(0).on('change', function() {
            return Configuration.todoConfiguration.at(0).save();
          });
        }
        return Configuration.todoConfiguration.at(0);
      });
      return Configuration.todoConfiguration.fetch({
        wait: true
      }).done(configurationLoaded).fail(configurationErrorOnLoad);
    };
    App.mainRegion.on('before:show', function(view) {

      /*
      			TODO check with instanceof
       */
      Configuration.mainView = new ConfigurationView({
        model: Configuration.todoConfiguration.at(0)
      });
      return view.configurationView.show(Configuration.mainView);
    });
    return Configuration.addInitializer(function() {
      return Configuration.run();
    });
  });

  App.module('TodoListApp.TopBar', function(TopBar, App, Backbone, Marionette, $, _) {
    var TopBarView;
    TopBarView = (function(_super) {
      __extends(TopBarView, _super);

      function TopBarView() {
        return TopBarView.__super__.constructor.apply(this, arguments);
      }

      TopBarView.prototype.template = _.template("<nav class=\"navbar navbar-default navbar-fixed-top\" role=\"navigation\">\n	<div class=\"container-fluid\">\n		<button type=\"button\" class=\"btn btn-default sync-pouchdb navbar-btn pull-right\" title=\"unsynced\">\n			<i class=\"fa fa-long-arrow-down text-muted\"></i>\n			<i class=\"fa fa-exclamation text-warning snyc-needed hidden\"></i>\n			<i class=\"fa fa-long-arrow-up text-muted\"></i>\n		</button>\n		<button type=\"button\" class=\"btn btn-default show-settings navbar-btn pull-right\" title=\"Settings\">\n			<i class=\"fa fa-cogs fa-fw\"></i>\n		</button>\n		<button type=\"button\" class=\"btn btn-default show-lists navbar-btn pull-left active\" title=\"Show Lists\">\n			<i class=\"fa fa-bars fa-fw\"></i>\n		</button>\n		<p class=\"navbar-text list-name\"></p>\n	</div>\n</nav>");

      TopBarView.prototype.hashTo = '.fa-long-arrow-up';

      TopBarView.prototype.hashFrom = '.fa-long-arrow-down';

      TopBarView.prototype.events = {
        'click button.sync-pouchdb': function() {
          return App.vent.trigger('todolistapp:startReplication');
        },
        'click button.show-settings': function() {
          return App.vent.trigger('todolist:configuration:hideview');
        },
        'click button.show-lists': function() {
          this.$('button.show-lists').toggleClass('active');
          return App.vent.trigger('todolist:lists:show');
        }
      };

      TopBarView.prototype.normalizeTo = function() {
        return this.$(this.hashTo).removeClass('text-success text-danger text-primary text-warning text-muted faa-flash animated');
      };

      TopBarView.prototype.normalizeFrom = function() {
        return this.$(this.hashFrom).removeClass('text-success text-danger text-primary text-warning text-muted faa-flash animated');
      };

      TopBarView.prototype.mapDBEventToClass = function(event, cssclass) {
        var eventHandler;
        eventHandler = function() {
          this.normalizeTo().addClass(cssclass);
          return this.$('.sync-pouchdb').attr('title', moment().format('llll'));
        };
        return this.listenTo(App.vent, event, eventHandler);
      };

      TopBarView.prototype.mapDBEventFromClass = function(event, cssclass) {
        var eventHandler;
        eventHandler = function() {
          this.normalizeFrom().addClass(cssclass);
          return this.$('.sync-pouchdb').attr('title', moment().format('llll'));
        };
        return this.listenTo(App.vent, event, eventHandler);
      };

      TopBarView.prototype.listChanged = function(todolistmodel) {
        return this.$('.list-name').text(todolistmodel.get('name'));
      };

      TopBarView.prototype.listDeleted = function(a) {
        if (App.TodoListApp.entryCollection != null) {
          if (a === App.TodoListApp.entryCollection["todolist-id"]) {
            return this.$('.list-name').text('<nix ausgewählt>');
          }
        } else {
          return this.$('.list-name').text('<nix ausgewählt>');
        }
      };

      TopBarView.prototype.onRender = function() {
        return this.$('.list-name').text('<nix ausgewählt>');
      };

      TopBarView.prototype.initialize = function() {
        this.mapDBEventToClass('replication:pouchdb:to:cancel', 'text-warning');
        this.mapDBEventToClass('replication:pouchdb:to:change', 'text-primary faa-flash animated');
        this.mapDBEventToClass('replication:pouchdb:to:error', 'text-danger');
        this.mapDBEventToClass('replication:pouchdb:to:complete', 'text-warning');
        this.mapDBEventToClass('replication:pouchdb:to:uptodate', 'text-success');
        this.mapDBEventFromClass('replication:pouchdb:from:cancel', 'text-warning');
        this.mapDBEventFromClass('replication:pouchdb:from:change', 'text-primary faa-flash animated');
        this.mapDBEventFromClass('replication:pouchdb:from:error', 'text-danger');
        this.mapDBEventFromClass('replication:pouchdb:from:complete', 'text-warning');
        this.mapDBEventFromClass('replication:pouchdb:from:uptodate', 'text-success');
        this.listenTo(App.vent, 'todolist:deleted-list', this.listDeleted);
        return this.listenTo(App.vent, 'todolist:changelist', this.listChanged);
      };

      return TopBarView;

    })(Marionette.LayoutView);
    App.reqres.setHandler("todolistapp:class:TopBarView", function() {
      return TopBarView;
    });
    return App.mainRegion.on('before:show', function(view) {

      /*
      			TODO check with instanceof
       */
      TopBar.mainView = new TopBarView();
      return view.topBar.show(TopBar.mainView);
    });
  });

}).call(this);
